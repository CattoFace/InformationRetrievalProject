AI F AIRNESS 360: A NEXTENSIBLE TOOLKIT FOR DETECTING ,
UNDERSTANDING ,AND MITIGATING UNWANTED ALGORITHMIC BIAS
Rachel K. E. Bellamy1Kuntal Dey2Michael Hind1Samuel C. Hoffman1Stephanie Houde1
Kalapriya Kannan3Pranay Lohia3Jacquelyn Martino1Sameep Mehta3Aleksandra Mojsilovic1
Seema Nagar3Karthikeyan Natesan Ramamurthy1John Richards1Diptikalyan Saha3Prasanna Sattigeri1
Moninder Singh1Kush R. Varshney1Yunfeng Zhang1
ABSTRACT
Fairness is an increasingly important concern as machine learning models are used to support decision making
in high-stakes applications such as mortgage lending, hiring, and prison sentencing. This paper introduces a new
open source Python toolkit for algorithmic fairness, AI Fairness 360 (AIF360), released under an Apache v2.0
license ( https://github.com/ibm/aif360 ). The main objectives of this toolkit are to help facilitate the
transition of fairness research algorithms to use in an industrial setting and to provide a common framework for
fairness researchers to share and evaluate algorithms.
The package includes a comprehensive set of fairness metrics for datasets and models, explanations for these
metrics, and algorithms to mitigate bias in datasets and models. It also includes an interactive Web experience
(https://aif360.mybluemix.net ) that provides a gentle introduction to the concepts and capabilities
for line-of-business users, as well as extensive documentation, usage guidance, and industry-speciÔ¨Åc tutorials to
enable data scientists and practitioners to incorporate the most appropriate tool for their problem into their work
products. The architecture of the package has been engineered to conform to a standard paradigm used in data
science, thereby further improving usability for practitioners. Such architectural design and abstractions enable
researchers and developers to extend the toolkit with their new algorithms and improvements, and to use it for
performance benchmarking. A built-in testing infrastructure maintains code quality.
1 I NTRODUCTION
Recent years have seen an outpouring of research on fair-
ness and bias in machine learning models. This is not sur-
prising, as fairness is a complex and multi-faceted concept
that depends on context and culture. Narayanan described
at least 21 mathematical deÔ¨Ånitions of fairness from the
literature (Narayanan, 2018). These are not just theoreti-
cal differences in how to measure fairness; different def-
initions produce entirely different outcomes. For exam-
ple, ProPublica and Northpointe had a public debate on an
important social justice issue (recidivism prediction) that
was fundamentally about what is the right fairness met-
ric (Larson et al., 2016; Dieterich et al., 2016; Larson &
Angwin, 2016). Furthermore, researchers have shown that
it is impossible to satisfy all deÔ¨Ånitions of fairness at the
same time (Kleinberg et al., 2017). Thus, although fair-
ness research is a very active Ô¨Åeld, clarity on which bias
metrics and bias mitigation strategies are best is yet to be
1IBM Research, Yorktown Heights, NY , USA2IBM Research,
New Delhi, India3IBM Research, Bangalore, India.achieved (Friedler et al., 2018).
In addition to the multitude of fairness deÔ¨Ånitions, differ-
ent bias handling algorithms address different parts of the
model life-cycle, and understanding each research contri-
bution, how, when and why to use it is challenging even for
experts in algorithmic fairness. As a result, general pub-
lic, fairness scientiÔ¨Åc community and AI practitioners need
clarity on how to proceed. Currently the burden is on ML
and AI developers, as they need to deal with questions such
as ‚ÄúShould the data be debiased?‚Äù, ‚ÄúShould we create new
classiÔ¨Åers that learn unbiased models?‚Äù, and ‚ÄúIs it better to
correct predictions from the model?‚Äù
To address these issues we have created AI Fairness 360
(AIF360), an extensible open source toolkit for detect-
ing, understanding, and mitigating algorithmic biases. The
goals of AIF360 are to promote a deeper understanding
of fairness metrics and mitigation techniques; to enable an
open common platform for fairness researchers and indus-
try practitioners to share and benchmark their algorithms;
and to help facilitate the transition of fairness research al-
gorithms to use in an industrial setting.arXiv:1810.01943v1  [cs.AI]  3 Oct 2018AI Fairness 360
AIF360 will make it easier for developers and practition-
ers to understand bias metrics and mitigation and to foster
further contributions and information sharing. To help in-
crease the likelihood that AIF360 will develop into a Ô¨Çour-
ishing open source community, we have designed the sys-
tem to be extensible, adopted software engineering best
practices to maintain code quality, and invested signiÔ¨Å-
cantly in documentation, demos, and other artifacts.
The initial AIF360 Python package implements techniques
from 8 published papers from the broader algorithm fair-
ness community. This includes over 71 bias detection met-
rics, 9 bias mitigation algorithms, and a unique extensi-
ble metric explanations facility to help consumers of the
system understand the meaning of bias detection results.
These techniques can all be called in a standard way, simi-
lar to scikit-learn‚Äôs Ô¨Åt/transform/predict paradigm. In addi-
tion, there are several realistic tutorial examples and note-
books showing salient features for industry use that can be
quickly adapted by practitioners.
AIF360 is the Ô¨Årst system to bring together in one open
source toolkit: bias metrics, bias mitigation algorithms,
bias metric explanations, and industrial usability. By in-
tegrating these aspects, AIF360 can enable stronger collab-
oration between AI fairness researchers and practitioners,
helping to translate our collective research results to prac-
ticing data scientists, data engineers, and developers de-
ploying solutions in a variety of industries.
The contributions of this paper are
an extensible architecture that incorporates dataset
representations and algorithms for bias detection, bias
mitigation, and bias metric explainability
an empirical evaluation that demonstrates how
AIF360 can be used for scientiÔ¨Åc comparisons of bias
metrics and mitigation algorithms
the design of an interactive web experience to intro-
duce users to bias detection and mitigation techniques
This paper is organized as follows. In Section 2, we in-
troduce the basic terminology of bias detection and miti-
gation. In Section 3, we review prior art and other open
source libraries and contributions in this area. The overall
architecture of the toolkit is outlined in Section 4, while
Sections 5, 6, 7, and 8 present details of the underlying
dataset, metrics, explainer, and algorithms base classes and
abstractions, respectively. In Section 9, we review our test-
ing protocols and test suite for maintaining quality code. In
Section 10, we discuss algorithm evaluation in bias check-
ing and mitigation. In Section 11, we describe the design
of the front-end interactive experience, and the design of
the back-end service. Concluding remarks and next steps
are provided in Section 12.2 T ERMINOLOGY
In this section, we brieÔ¨Çy deÔ¨Åne specialized terminology
from the Ô¨Åeld of fairness in machine learning. A favor-
able label is a label whose value corresponds to an outcome
that provides an advantage to the recipient. Examples are
receiving a loan, being hired for a job, and not being ar-
rested. A protected attribute is an attribute that partitions a
population into groups that have parity in terms of beneÔ¨Åt
received. Examples include race, gender, caste, and reli-
gion. Protected attributes are not universal, but are appli-
cation speciÔ¨Åc. A privileged value of a protected attribute
indicates a group that has historically been at a systematic
advantage. Group fairness is the goal of groups deÔ¨Åned
by protected attributes receiving similar treatments or out-
comes. Individual fairness is the goal of similar individuals
receiving similar treatments or outcomes. Bias is a system-
atic error. In the context of fairness, we are concerned with
unwanted bias that places privileged groups at a systematic
advantage and unprivileged groups at a systematic disad-
vantage. A fairness metric is a quantiÔ¨Åcation of unwanted
bias in training data or models. A bias mitigation algorithm
is a procedure for reducing unwanted bias in training data
or models.
3 R ELATED WORK
Several open source libraries have been developed in recent
years to provide various levels of functionality in learn-
ing fair AI models. Many of these deal only with bias
detection, and provide no techniques for mitigating such
bias. Fairness Measures (Zehlike et al., 2017), for example,
provides several fairness metrics, including difference of
means, disparate impact, and odds ratio. A set of datasets
is also provided, though some datasets are not in the pub-
lic domain and need explicit permission from the owners
to access/use the data. Similarly, FairML (Adebayo, 2016)
provides an auditing tool for predictive models by quantify-
ing the relative effects of various inputs on a models predic-
tions. This, in turn, can be used to assess the models fair-
ness. FairTest (Tram `er et al., 2017), on the other hand, ap-
proaches the task of detecting biases in a dataset by check-
ing for associations between predicted labels and protected
attributes. The methodology also provides a way to iden-
tify regions of the input space where an algorithm might
incur unusually high errors. This toolkit also includes a
rich catalog of datasets. Aequitas (Stevens et al., 2018) is
another auditing toolkit for data scientists as well as pol-
icy makers; it has a Python library as well as an associated
web site where data can be uploaded for bias analysis. It
offers several fairness metrics, including demographic or
statistical parity and disparate impact, along with a ‚Äùfair-
ness tree‚Äù to help users identify the correct metric to use for
their particular situation. Aequitas‚Äôs license does not allowAI Fairness 360
commercial use. Finally, Themis (Galhotra et al., 2017) is
an open source bias toolbox that automatically generates
test suites to measure discrimination in decisions made by
a predictive system.
A handful of toolkits address both bias detection as well
as bias mitigation. Themis-ML (Bantilan, 2018) is one
such repository that provides a few fairness metrics, such
as mean difference, as well as some bias mitigation algo-
rithms, such as relabeling (Kamiran & Calders, 2012), ad-
ditive counterfactually fair estimator (Kusner et al., 2017),
and reject option classiÔ¨Åcation (Kamiran et al., 2012). The
repository contains a subset of the methods described in the
paper. Fairness Comparison (Friedler et al., 2018) is one of
the more extensive libraries. It includes several bias detec-
tion metrics as well as bias mitigation methods, including
disparate impact remover (Feldman et al., 2015), prejudice
remover (Kamishima et al., 2012), and two-Naive Bayes
(Calders & Verwer, 2010). Written primarily as a test-bed
to allow different bias metrics and algorithms to be com-
pared in a consistent way, it also allows the addition of ad-
ditional algorithms and datasets.
Our work on AIF360 aims to unify these efforts and bring
together in one open source toolkit a comprehensive set of
bias metrics, bias mitigation algorithms, bias metric expla-
nations, and industrial usability. Another contribution of
this work is a rigorous architectural design focused on ex-
tensibility, usability, explainability, and ease of benchmark-
ing that goes beyond the existing work. We outline these
design aspects in more details in the following sections.
4 O VERARCHING PARADIGM AND
ARCHITECTURE
AIF360 is designed as an end-to-end workÔ¨Çow with two
goals: (a) ease of use and (b) extensibility. Users should be
able to go from raw data to a fair model as easily as pos-
sible, while comprehending the intermediate results. Re-
searchers should be able to contribute new functionality
with minimal effort.
Figure 1 shows our generic pipeline for bias mitigation.
Every output in this process (rectangles in the Ô¨Ågure) is
a new dataset that shares, at least, the same protected at-
tributes as other datasets in the pipeline. Every transition
is a transformation that may modify the features or labels
or both between its input and output. Trapezoids represent
learned models that can be used to make predictions on test
data. There are also various stages in the pipeline where we
can assess if bias is present using fairness metrics (not pic-
tured), and obtain relevant explanations for the same (not
pictured). These will each be discussed below.
To ensure ease of use, we created simple abstractions
for datasets, metrics, explainers, and algorithms. Metricclasses compute fairness and accuracy metrics using one or
two datasets, explainer classes provide explanations for the
metrics, and algorithm classes implement bias mitigation
algorithms. Each of these abstractions are discussed in de-
tail in the subsequent sections. The term ‚Äúdataset‚Äù refers to
the dataset object created using our abstraction, as opposed
to a CSV data Ô¨Åle or a Pandas DataFrame .
The base classes for the abstractions are general enough to
be useful, but speciÔ¨Åc enough to prevent errors. For exam-
ple, there is no functional difference between predictions
and ground-truth data or training and testing data. Each
dataset object contains both features and labels, so it can
be both an output of one transformation and an input to
another. More specialized subclasses beneÔ¨Åt from inheri-
tance while also providing some basic error-checking, such
as determining what metrics are available for certain types
of datasets. Finally, we are able to generate high-quality,
informative documentation automatically by using Sphinx1
to parse the docstring blocks in the code.
There are three main paths to the goal of making fair pre-
dictions (bottom right) ‚Äî these are labelled in bold: fair
pre-processing, fair in-processing, and fair post-processing.
Each corresponds to a category of bias mitigation algo-
rithms we have implemented in AIF360. Functionally,
however, all three classes of algorithms act on an input
dataset and produce an output dataset. This paradigm and
the terminology we use for method names are familiar to
the machine learning/data science community and simi-
lar to those used in other libraries such as scikit-learn.2
Block arrows marked ‚Äúlearn‚Äù in Figure 1 correspond to
thefit method for a particular algorithm or class of algo-
rithms. Sequences of arrows marked ‚Äúapply‚Äù correspond to
transform orpredict methods. Predictions, by con-
vention, result in an output that differs from the input by
labels and not features or protected attributes. Transfor-
mations result in an output that may differ in any of those
attributes.
Although pre-, in-, and post-processing algorithms are all
treated the same in our design, there are important consid-
erations that the user must make in choosing which to use.
For example, post-processing algorithms are easy to apply
to existing classiÔ¨Åers without retraining. By making the
distinction clear, which many libraries listed in Section 3
do not do, we hope to make the process transparent and
easy to understand.
As for extensibility, while we cannot generalize from only
one user, we were very encouraged about how easy it is to
use the toolkit when within days of the toolkit being made
available, a researcher from the AI fairness Ô¨Åeld submit-
1http://www.sphinx-doc.org/en/master/
2http://scikit-learn.orgAI Fairness 360
Raw Dataconvertto CSVOriginal Dataset
Transformed Datasettrainingtestinglearnfairclassifier
Fair Predicted Datasettestinglearnfairpre-processingfairin-processingapply
classifierapplylearntrainingclassifierapplyPredicted Datasettesting
fair post-processorvalidationlearn
applyfairpost-processingdata pre-processingand loadingtestingfair pre-processorapply
Figure 1. The fairness pipeline. An example instantiation of this generic pipeline consists of loading data into a dataset object, trans-
forming it into a fairer dataset using a fair pre-processing algorithm, learning a classiÔ¨Åer from this transformed dataset, and obtaining
predictions from this classiÔ¨Åer. Metrics can be calculated on the original, transformed, and predicted datasets as well as between the
transformed and predicted datasets. Many other instantiations are also possible.
ted a pull request asking to add his group‚Äôs bias mitigation
algorithm. In a subsequent interview, this contributor in-
formed us that contributing to the toolkit did not take much
time as: ‚Äú ...it was very well structured and very easy to
follow ‚Äù.
A simpliÔ¨Åed UML class diagram of the code is provided in
Appendix A for reference. Code snippets for an instantia-
tion of the pipeline based on our AIF360 implementation is
provided in Appendix B.
5 D ATASET CLASS
TheDataset class and its subclasses are a key abstrac-
tion that handle all forms of data. Training data is used to
learn classiÔ¨Åers. Testing data is used to make predictions
and compare metrics. Besides these standard aspects of
a machine learning pipeline, fairness applications also re-
quire associating protected attributes with each instance or
record in the data. To maintain a common format, indepen-
dent of what algorithm or metric is being applied, we chose
to structure the Dataset class so that all of these rele-
vant attributes ‚Äî features, labels, protected attributes, and
their respective identiÔ¨Åers (names describing each) ‚Äî are
present and accessible from each instance of the class. Sub-
classes add further attributes that differentiate the dataset
and dictate with which algorithms and metrics it is able tointeract.
Structured data is the primary form of dataset stud-
ied in the fairness literature and is represented by the
StructuredDataset class. Further distinction is made
for aBinaryLabelDataset ‚Äî a structured dataset that
has a single label per instance that can only take one of two
values: favorable or unfavorable. Unstructured data, which
is receiving more attention from the fairness community,
can be accommodated in our architecture by constructing
a parallel class to the StructuredDataset class, with-
out affecting existing classes or algorithms that are not ap-
plicable to unstructured data.
The classes provide a common structure for the rest of
the pipeline to use. However, since raw data comes in
many forms, it is not possible to automatically load an ar-
bitrary raw dataset without input from the user about the
data format. The toolkit includes a StandardDataset
class that standardizes the process of loading a dataset from
CSV format and populating the necessary class attributes.
Raw data must often be ‚Äúcleaned‚Äù before being used and
categorical features must be encoded as numerical enti-
ties. Furthermore, with the same raw data, different ex-
periments are often run using subsets of features or pro-
tected attributes. The StandardDataset class handles
these common tasks by providing a simple interface for theAI Fairness 360
user to specify the columns of a Pandas DataFrame that
correspond to features, labels, protected attributes, and op-
tionally instance weights; the values of protected attributes
that correspond to privileged status; the values of labels that
correspond to favorable status; the features that need to be
converted from categorical to numerical; and the subset of
features to keep for the subsequent analysis. It also allows
for arbitrary, user-deÔ¨Åned data pre-processing, such as de-
riving new features from existing ones or Ô¨Åltering invalid
instances.
We extend the StandardDataset class with examples
of commonly used datasets that can be used to load datasets
in different manners without modifying code by simply
passing different arguments to the constructor. This is in
contrast with other tools that make it more difÔ¨Åcult to con-
Ô¨Ågure the loading procedure at runtime. We currently pro-
vide an interface to seven popular datasets: Adult Cen-
sus Income (Kohavi, 1996), German Credit (Dheeru &
Karra Taniskidou, 2017), ProPublica Recidivism (COM-
PAS) (Angwin et al., 2016), Bank Marketing (Moro et al.,
2014), and three versions of Medical Expenditure Panel
Surveys (AHRQ, 2015; 2016).
Besides serving as a structure that holds data to be used by
bias mitigation algorithms or metrics, the Dataset class
provides many important utility functions and capabilities.
Using Python‚Äôs ==operator, we are able to compare equal-
ity of two datasets and even compare a subset of Ô¨Åelds us-
ing a custom context manager temporarily ignore3
Thesplit method allows for easy partitioning into train-
ing, testing, and possibly validation sets. We are also able
to easily convert to Pandas DataFrame format for visu-
alization, debugging, and compatibility with externally im-
plemented code. Finally, we track basic metadata associ-
ated with each dataset instance. Primary among these is a
simple form of provenance-tracking: after each modiÔ¨Åca-
tion by an algorithm, a new object is created and a pointer
to the previous state is kept in the metadata along with de-
tails of the algorithm applied. This way, we maintain trust
and transparency in the pipeline.
6 M ETRICS CLASS
TheMetric class and its subclasses compute various
individual and group fairness metrics to check for bias
in datasets and models.4TheDatasetMetric class
3A sample snippet of this functionality is as follows:
with transf.temporarily ignore(‚Äòlabels‚Äô):
return transf == pred
This returns True if the two datasets transf andpred differ
only in labels.
4In the interest of space, we omit mathematical notation and
deÔ¨Ånitions here. They may be found elsewhere, including the doc-
umentation for AIF360.and its subclass BinaryLabelDatasetMetric exam-
ine a single dataset as input ( StructuredDataset and
BinaryLabelDataset , respectively) and are typically
applied in the left half of Figure 1 to either the original
dataset or the transformed dataset. The metrics therein are
the group fairness measures of disparate (DI) and statistical
parity difference (SPD) ‚Äî the ratio and difference, respec-
tively, of the base rate conditioned on the protected attribute
‚Äî and the individual fairness measure consistency deÔ¨Åned
by Zemel et al. (2013).
In contrast, the SampleDistortionMetric and
ClassificationMetric classes examine two
datasets as input. For classiÔ¨Åcation metrics, the Ô¨Årst input
is the original or transformed dataset containing true
labels, and the second input is the predicted dataset or fair
predicted dataset, respectively, containing predicted labels.
This metric class implements accuracy and fairness metrics
on models. The sample distortion class contains distance
computations between the same individual point in the
original and transformed datasets for different distances.
Such metrics are used, e.g. by Calmon et al. (2017), to
quantify individual fairness.
A large collection of group fairness and accuracy metrics
in the classiÔ¨Åcation metric class are functions of the con-
fusion matrix of the true labels and predicted labels, e.g.
false negative rate difference and false discovery rate ratio.
Two metrics important for later reference are average odds
difference (the mean of the false positive rate difference
and the true positive rate difference), and equal opportu-
nity difference (the true positive rate difference). ClassiÔ¨Å-
cation metrics also include disparate impact and statistical
parity difference, but based on predicted labels. Since the
main computation of confusion matrices is common for a
large set of metrics, we utilize memoization and caching of
computations for performance on large-scale datasets. This
class also contains metrics based on the generalized en-
tropy index, which is able to quantify individual and group
fairness with a single number (Speicher et al., 2018). Addi-
tional details on the metrics used in the evaluations (Section
10) are given in Appendix C.
There is a need for a large number and variety of fairness
metrics in the toolkit because there is no one best metric
relevant for all contexts. It must be chosen carefully, based
on subject matter expertise and worldview (Friedler et al.,
2016). The comprehensiveness of the toolkit allows a user
to not be hamstrung in making the most appropriate choice.
7 E XPLAINER CLASS
TheExplainer class is intended to be associated with
theMetric class and provide further insights about com-
puted fairness metrics. Different subclasses of varyingAI Fairness 360
(a) (b)
Figure 2. Protected attribute bias localization in (a) younger (un-
privileged), and (b) older (privileged) groups in the German
Credit dataset. The 17‚Äì27 range in the younger group and the 43‚Äì
58 range in the older group would be localized by the approach.
complexity that extend the Explainer class can be cre-
ated to output explanations that are meaningful to different
user personas. To the best of our knowledge, this is the
Ô¨Årst fairness toolkit that stresses the need for explanations.
The explainer capability implemented in the Ô¨Årst release of
AIF360 is basic reporting through ‚Äùpretty print‚Äù and JSON
outputs. Future releases may include methodologies such
as Ô¨Åne-grained localization of bias (we describe the ap-
proach herein), actionable recourse analysis (Ustun et al.,
2018), and counterfactual fairness (Wachter et al., 2018).
7.1 Reporting
TextExplainer , a subclass of Explainer , returns
a plain text string with a metric value. For example,
the explanation for the accuracy metric is simply the
text string ‚ÄúClassiÔ¨Åcation accuracy on hcountiinstances:
haccuracyi‚Äù, wherehcountirepresents the number of
records, andhaccuracyithe accuracy. This can be invoked
for both the privileged and unprivileged instances by pass-
ing arguments.
JSONExplainer extends TextExplainer and pro-
duces three output attributes in JSON format: (a) meta-
attributes about the metric such as its name, a natural lan-
guage description of its deÔ¨Ånition and its ideal value in
a bias-free world, (b) statistical attributes that include the
raw and derived numbers, and (c) the plain text explanation
passed unchanged from the superclass TextExplainer .
Outputs from this class are consumed by the Web applica-
tion described in Section 11.
7.2 Fine-grained localization
A more insightful explanation for fairness metrics is the lo-
calization of the source of bias at a Ô¨Åne granularity in the
protected attribute and feature spaces. In the protected at-
tribute space, the approach Ô¨Ånds the values in which the
given fairness metric is diminished (unprivileged group) or
Figure 3. Feature bias localization in the Stanford Open Policing
dataset for Connecticut, with county name as the feature and race
as the protected attribute. In Hartford County, the ratio of search
rates for the unprivileged groups (black and Hispanic) in propor-
tion to the search rate for the privileged group (this ratio is the
DI fairness metric) is higher than the same metric in Middlesex
County and others. The approach would localize Hartford County.
enhanced (privileged group) compared to the entire group.
In the feature space, the approach computes the given fair-
ness metric across all feature values and localizes on ones
that are most objectionable. Figure 2 illustrates protected
attribute bias localization on the German Credit dataset,
with age as the protected attribute. Figure 3 illustrates fea-
ture bias localization on the Stanford Open Policing dataset
(Pierson et al., 2017) for Connecticut, with county name as
the feature and race as the protected attribute.
8 A LGORITHMS CLASS
Bias mitigation algorithms attempt to improve the fair-
ness metrics by modifying the training data, the learn-
ing algorithm, or the predictions. These algorithm cat-
egories are known as pre-processing, in-processing, and
post-processing, respectively (d‚ÄôAlessandro et al., 2017).
8.1 Bias mitigation approaches
The bias mitigation algorithm categories are based on the
location where these algorithms can intervene in a com-
plete machine learning pipeline. If the algorithm is al-
lowed to modify the training data, then pre-processing can
be used. If it is allowed to change the learning procedure
for a machine learning model, then in-processing can be
used. If the algorithm can only treat the learned model as a
black box without any ability to modify the training data or
learning algorithm, then only post-processing can be used.
This is illustrated in Figure 1.AI Fairness 360
8.2 Algorithms
AIF360 currently contains 9bias mitigation algorithms that
span these three categories. All the algorithms are im-
plemented by inheriting from the Transformer class.
Transformers are an abstraction for any process that acts
on an instance of Dataset class and returns a new, mod-
iÔ¨ÅedDataset object. This deÔ¨Ånition encompasses pre-
processing, in-processing, and post-processing algorithms.
Pre-processing algorithms: Reweighing (Kamiran &
Calders, 2012) generates weights for the training exam-
ples in each (group, label) combination differently to en-
sure fairness before classiÔ¨Åcation. Optimized preprocess-
ing (Calmon et al., 2017) learns a probabilistic transforma-
tion that edits the features and labels in the data with group
fairness, individual distortion, and data Ô¨Ådelity constraints
and objectives. Learning fair representations (Zemel et al.,
2013) Ô¨Ånds a latent representation that encodes the data
well but obfuscates information about protected attributes.
Disparate impact remover (Feldman et al., 2015) edits fea-
ture values to increase group fairness while preserving
rank-ordering within groups.
In-processing algorithms: Adversarial debiasing (Zhang
et al., 2018) learns a classiÔ¨Åer to maximize prediction ac-
curacy and simultaneously reduce an adversarys ability to
determine the protected attribute from the predictions. This
approach leads to a fair classiÔ¨Åer as the predictions can-
not carry any group discrimination information that the ad-
versary can exploit. Prejudice remover (Kamishima et al.,
2012) adds a discrimination-aware regularization term to
the learning objective.
Post-processing algorithms: Equalized odds postprocess-
ing (Hardt et al., 2016) solves a linear program to Ô¨Ånd
probabilities with which to change output labels to op-
timize equalized odds. Calibrated equalized odds post-
processing (Pleiss et al., 2017) optimizes over calibrated
classiÔ¨Åer score outputs to Ô¨Ånd probabilities with which to
change output labels with an equalized odds objective. Re-
ject option classiÔ¨Åcation (Kamiran et al., 2012) gives fa-
vorable outcomes to unprivileged groups and unfavorable
outcomes to privileged groups in a conÔ¨Ådence band around
the decision boundary with the highest uncertainty.
9 M AINTAINING CODE QUALITY
Establishing and maintaining high quality code is crucial
for an evolving open source system. Although we do not
claim any novelty over modern software projects, we do
feel that faithfully adopting such practices is another dis-
tinguishing feature of AIF360 relative to other fairness
projects.
An extensible toolkit should provide conÔ¨Ådence to its con-tributors that, while it makes it is easy for them to extend, it
does not alter the existing API contract. Our testing proto-
cols are designed to cover software engineering aspects and
comprehensive test suites that focus on the performance
metrics of fairness detection and mitigation algorithms.
The AIF360 Github repository is directly integrated with
Travis CI,5a continuous testing and integration framework,
which invokes pytest to run our unit tests. Any pull re-
quest automatically triggers the tests. The results of the
tests are made available to the reviewer of the pull request
to help ensure that changes to the code base do not intro-
duce bugs that would break the tests.
Unit test cases ensure that classes and functions de-
Ô¨Åned in the different libraries are functionally correct
and do not break the Ô¨Çow of the fairness detection and
mitigation pipeline. Each of our classes is equipped
with unit tests that attempt to cover every aspect of the
class/module/functions.
We have also developed a test suite to compute the metrics
reported in Section 6. Our measurements include aspects of
the fairness metrics, classiÔ¨Åcation metrics, dataset metrics,
and distortion metrics, covering a total of 71 metrics at the
time of this writing. These metrics tests can be invoked
directly with any fairness algorithm. The test suite also
provides unit tests for all bias mitigation algorithms and
basic validation of the datasets.
Our repository has two types of tests: (1) unit tests that
test individual helper functions, and (2) integration tests
that test a complete Ô¨Çowof bias mitigation algorithms in
Jupyter notebooks. Table 1 provides the statistics and code
coverage information as reported by the tool py.test
--cov and Jupyter notebook coverage using py.test
--nbval .
Table 1. Statistics on the Test Suite for AIF360
Metrics Statistics
Number of Unit Test cases 23 test cases in 13 modules
Code Coverage (Helper Files) 65%
Code Coverage (Algorithms) 58%
10 E VALUATION OF THE ALGORITHMS
Fairness is a complex construct that cannot be captured
with a one-size-Ô¨Åts-all solution. Hence, our goal in this
evaluation is two-fold: (a) demonstrating the capabilities
of our toolkit in terms of the various fairness metrics and
bias mitigation algorithms, (b) showing how a user can un-
derstand the behavior of various metrics and bias mitigation
algorithms on her dataset, and make an appropriate choice
according to her needs.
5https://travis-ci.org/AI Fairness 360
Table 2. Overview of the experimental setup
Datasets Adult Census Income, German Credit, COMPAS
Metrics Disparate impact
Statistical parity difference
Average odds difference
Equal opportunity difference
ClassiÔ¨Åers Logistic regression (LR),
Random forest classiÔ¨Åer (RF), Neural Network (NN)
Re-weighing (Kamiran & Calders, 2012)
Pre-processing Optimized pre-processing (Calmon et al., 2017)
Algorithms Learning fair representations (Zemel et al., 2013)
Disparate impact remover (Feldman et al., 2015)
In-processing Adversarial debiasing (Zhang et al., 2018)
Algorithms Prejudice remover (Kamishima et al., 2012)
Post-processing Equalized odds post-processing (Hardt et al., 2016)
Algorithms Calibrated eq. odds postprocessing (Pleiss et al., 2017)
Reject option classiÔ¨Åcation (Kamiran et al., 2012)
Table 2 provides the datasets, metrics, classiÔ¨Åers, and bias
mitigation algorithms used in our experiments. Additional
details on the datasets and metrics are available in Ap-
pendix C. The processed Adult Census Income ,German
Credit , and COMPAS datasets contain 45;222,1;000and
6;167records respectively. Except Adversarial debiasing
and Disparate impact remover, all other bias mitigation al-
gorithms use datasets that are cleaned and pre-processed in
a similar way. Each dataset is randomly divided into 50%
training, 20% validation, and 30% test partitions. Each
point in the Ô¨Ågures of results consists of a mean and a
spread (1 standard deviation) computed using 25such
random splits. For the random forest classiÔ¨Åer, we set the
number of trees to be 100, and the minimum samples at a
leaf node to be 20.
For fair pre-processing algorithms, since the original
dataset itself gets transformed (see Figure 1), we com-
pute fairness metrics before and after this transformation
and present results in Figure 4. For all datasets, the Re-
weighing and Optimized pre-processing algorithms im-
prove fairness in both metrics presented. However, the least
improvement is with German Credit dataset, possibly be-
cause it is the smallest in size. Results for disparate impact
remover and learning fair representations algorithms are
not shown since they do not modify the labels or protected
attributes directly when transforming the dataset. Hence
the SPD and DI values do not change during transforma-
tion.
We also train classiÔ¨Åers with and without bias mitigation
for all the dataset and algorithm combinations. We then
measure statistical parity difference and disparate impact
using the predicted dataset, and average odds and equal op-
portunity difference using the input and predicted datasets.
In all possible cases, the validation datasets were used to
obtain the score threshold for the classiÔ¨Åers to maximize
balanced accuracy. The results are all obtained on test par-
titions.
An example result for Adult Census Income dataset withrace as protected attribute is shown in Figure 5. The rest
of the results referenced here are available in Appendix
D. Disparate impact remover and adversarial debiasing use
differently processed datasets and hence their metrics in the
top panel are different from others. The Ô¨Årst thing that
strikes when glancing at the Ô¨Ågure is that the four differ-
ent metrics seem to be correlated. Also the uncertainty in
classiÔ¨Åcation accuracy is much smaller compared to the un-
certainty in the fairness metrics. There is also correlation
between the metrics computed using the LR and RF classi-
Ô¨Åers. The Reject option classiÔ¨Åcation algorithm improves
fairness quite a bit, but also suffers a signiÔ¨Åcant reduc-
tion in accuracy. Reweighing and optimized pre-processing
also show good improvement in fairness, but without much
penalty in accuracy. The two equal odds post-processing
methods do not show signiÔ¨Åcant changes to accuracy or
fairness.
These evaluations can be used to arrive at an informed con-
clusion about the choice of bias mitigation algorithm de-
pending on the application. Clearly, if modifying the data is
possible reweighing or optimized pre-processing are good
options. However, if post-processing is the only option,
e.g., if the user has access only to black box models, reject
option classiÔ¨Åcation is shown to be a decent choice on av-
erage, although it is brittle. The effect of dataset size on
these metrics becomes clear looking at Figures 9 and 10.
The uncertainty is substantially higher in the case of Ger-
man Credit data. Fairness improvements are more mixed
in the COMPAS data, but Reweighing and Reject option
classiÔ¨Åcation still show up to be good choices.
11 W EBAPPLICATION
AIF360 includes not only the main toolkit code, but also
an interactive Web experience (see Appendix E for a screen
shot). Here we describe its front-end and back-end design.
11.1 Design of the interactive experience
The Web experience was designed to provide useful infor-
mation for a diverse consumers. For business users, the
interactive demonstration offers a sample of the toolkit‚Äôs
fairness checking and mitigation capabilities without re-
quiring any programming knowledge. For new developers,
the demonstration, notebook-based tutorials, guidance on
algorithm selection, and access to a user community pro-
vide multiple ways to progress from their current level of
understanding into the details of the code. For more ad-
vanced developers, the detailed documentation and code
are directly accessible.
The design of the Web experience proceeded through sev-
eral iterations. Early clickable mock-ups of the interactive
demonstration had users Ô¨Årst select a dataset, one or twoAI Fairness 360
(a) SPD - Re-weighing
 (b) SPD - Optimized pre-proc.
 (c) DI - Re-weighing
 (d) DI - Optimized pre-proc.
Figure 4. Statistical Parity Difference (SPD) and Disparate Impact (DI) before (blue bar) and after (orange bar) applying pre-processing
algorithms on various datasets for different protected attributes. The dark gray bars indicate the extent of 1 standard deviation. The
ideal fair value of SPD is 0 and DI is 1.
(a) Statistical parity difference
 (b) Disparate impact
 (c) Average odds difference
 (d) Equal opportunity difference
Figure 5. Fairness vs. Balanced Accuracy before (top panel) and after (bottom panel) applying various bias mitigation algorithms. Four
different fairness metrics are shown. In most cases two classiÔ¨Åers (Logistic regression - LR or Random forest classiÔ¨Åer - RF) were used.
The ideal fair value of disparate impact is 1, whereas for all other metrics it is 0. The circles indicate the mean value and bars indicate
the extent of 1 standard deviation. Dataset: Adult , Protected attribute: race.
protected attributes to check for bias, and one of up to Ô¨Åve
metrics to use for checking. We learned, however, that this
was overwhelming, even for those familiar with AI, since it
required choices they were not yet equipped to make. As a
result, we simpliÔ¨Åed the experience by asking users to Ô¨Årst
select only one of three datasets to explore. Bias checking
results were then graphically presented for two protected
attributes across Ô¨Åve different metrics. Users could then
select a mitigation algorithm leading to a report comparing
bias before and after mitigation. The design of the charts
for each bias metric also evolved in response to user feed-
back as we learned the importance of depicting a color-
coded range of values considered fair or biased with more
detailed information being available in an overlay. Figure
6 shows the before and after mitigation graphs from the in-
teractive Web experience.
The design of the rest of the site also went through several
iterations. Of particular concern, the front page sought to
Figure 6. Graphs from the interactive web experience showing
one of the metrics, for one of the datasets, before and after miti-
gation.AI Fairness 360
convey toolkit richness while still being approachable. In
the Ô¨Ånal design, a short textual introduction to the content
of the site, along with direct links to the API documentation
and code repository, is followed by a number of direct links
to various levels of advice and examples. Further links to
the individual datasets, the bias checkers, and the mitiga-
tion algorithms are also provided. In all this, we ensured
the site was suitably responsive across all major desktop
and mobile platforms.
11.2 Design of the back-end service
The demo web application not only provides a gentle in-
troduction to the capabilities of the toolkit, but also serves
as an example of deploying the toolkit to the cloud and
converting it into a web service. We used Python‚Äôs Flask
framework for building the service and exposed a REST
API that generates a bias report based on the following
input parameters from a user: the dataset name, the pro-
tected attributes, the privileged and unprivileged groups,
the chosen fairness metrics, and the chosen mitigation al-
gorithm, if any. With these inputs, the back-end then runs
a series of steps to 1) split the dataset into training, devel-
opment, and validation sets; 2) train a logistic regression
classiÔ¨Åer on the training set; 3) run the bias-checking met-
rics on the classiÔ¨Åer against the test dataset; 4) if a mitiga-
tion algorithm is chosen, run the mitigation algorithm with
the appropriate pipeline (pre-processing, in-processing, or
post-processing). The end result is then cached so that if
the exact same inputs are provided, the result can be di-
rectly retrieved from cache and no additional computation
is needed.
The reason to truly use the toolkit code in serving the Web
application rather than having a pre-computed lookup table
of results is twofold: we want to make the app a real rep-
resentation of the underlying capabilities (in fact, creating
the Web app helped us debug a few items in the code), and
we also avoid any issues of synchronizing updates to the
metrics, explainers, and algorithms with the results shown:
synchronization is automatic. Currently, the service is lim-
ited to three built-in datasets, but it can be expanded to sup-
port the user‚Äôs own data upload. The service is also limited
to building logistic regression classiÔ¨Åers, but again this can
be expanded. Such expansions can be more easily imple-
mented if this fairness service is integrated into a full AI
suite that provides various classiÔ¨Åer options and data stor-
age solutions.
12 C ONCLUSION
AIF360 is an open source toolkit that brings value to di-
verse users and practitioners. For fairness researchers, it
provides a platform that enables them to: 1) experiment
with and compare various existing bias detection and mit-igation algorithms in a common framework, and gain in-
sights into their practical usage; 2) contribute and bench-
mark new algorithms; 3) contribute new datasets and an-
alyze them for bias. For developers, it provides: 1) edu-
cation on the important issues in bias checking and mit-
igation, 2) guidance on which metrics and mitigation al-
gorithms to use; 3) tutorials and sample notebooks that
demonstrate bias mitigation in different industry settings;
and 4) a Python package for detecting and mitigating bias
in their workÔ¨Çows.
Fairness is a multifaceted, context-dependent social con-
struct that deÔ¨Åes simple deÔ¨Ånition. The metrics and algo-
rithms in AIF360 may be viewed from the lens of distribu-
tive justice (Hu & Chen, 2018), i.e., relating to decisions
about who in a society receives which beneÔ¨Åts and goods,
and clearly do not capture the full scope of fairness in all
situations. Even within distributive justice, more work is
needed to apply the toolkit to additional datasets and situa-
tions. Future work could also expand the toolkit to measure
and mitigate other aspects of justice such as compensatory
justice, i.e. relating to the extent to which people are fairly
compensated for harms done to them. Further work is also
needed to extend the variety of types of explanations of-
fered, and to create guidance for practitioners on when a
speciÔ¨Åc kind of explanation is most appropriate. There is a
lot of work left to do to achieve unbiased AI, we hope oth-
ers in the research community continue to contribute to the
toolkit their own approaches to fairness and bias checking,
mitigation and explanation.
REFERENCES
Adebayo, J. A. ‚ÄùFairML : Toolbox for diagnosing bias in
predictive modeling‚Äù. Master‚Äôs thesis, Massachusetts In-
stitute of Technology, 2016. URL https://github.
com/adebayoj/fairml .
AHRQ. Medical Expenditure Panel Survey data:
2015 Full Year Consolidated Data File, 2015. URL
https://meps.ahrq.gov/mepsweb/data_
stats/download_data_files_detail.jsp?
cboPufNumber=HC-181 .
AHRQ. Medical Expenditure Panel Survey data:
2016 Full Year Consolidated Data File, 2016. URL
https://meps.ahrq.gov/mepsweb/data_
stats/download_data_files_detail.jsp?
cboPufNumber=HC-192 .
Angwin, J., Larson, J., Mattu, S., and Kirchner, L. Ma-
chine bias: Theres software used across the country to
predict future criminals. And its biased against blacks.
ProPublica , 2016. URL https://github.com/
propublica/compas-analysis .AI Fairness 360
Bantilan, N. Themis-ml: A fairness-aware machine learn-
ing interface for end-to-end discrimination discovery and
mitigation. Journal of Technology in Human Services ,
36(1):15‚Äì30, 2018. URL https://github.com/
cosmicBboy/themis-ml .
Calders, T. and Verwer, S. Three naive Bayes ap-
proaches for discrimination-free classiÔ¨Åcation. Data
Mining journal; special issue with selected papers from
ECML/PKDD , 2010.
Calmon, F. P., Wei, D., Vinzamuri, B., Natesan Ra-
mamurthy, K., and Varshney, K. R. Optimized pre-
processing for discrimination prevention. In Advances
in Neural Information Processing Systems 30 , pp. 3992‚Äì
4001, Long Beach, USA, December 2017.
d‚ÄôAlessandro, B., O‚ÄôNeil, C., and LaGatta, T. Con-
scientious classiÔ¨Åcation: A data scientist‚Äôs guide to
discrimination-aware classiÔ¨Åcation. Big Data , 5(2):120‚Äì
134, June 2017.
Dheeru, D. and Karra Taniskidou, E. UCI ma-
chine learning repository, 2017. URL https:
//archive.ics.uci.edu/ml/datasets/
Statlog+%28German+Credit+Data%29 .
Dieterich, W., Mendoza, C., and Brennan, T. COM-
PAS risk scales: Demonstrating accuracy equity and
predictive parity, 2016. URL https://assets.
documentcloud.org/documents/2998391/
ProPublica-Commentary-Final-070616.
pdf.
Feldman, M., Friedler, S. A., Moeller, J., Scheidegger, C.,
and Venkatasubramanian, S. Certifying and removing
disparate impact. In Proceedings of the ACM SIGKDD
International Conference on Knowledge Discovery and
Data Mining , pp. 259‚Äì268, Sydney, Australia, August
2015.
Friedler, S. A., Scheidegger, C., and Venkatasubramanian,
S. On the (im)possibility of fairness. arXiv:1609.07236,
September 2016.
Friedler, S. A., Scheidegger, C., Venkatasubramanian, S.,
Choudhary, S., Hamilton, E. P., and Roth, D. A com-
parative study of fairness-enhancing interventions in
machine learning. http://arxiv.org/abs/1802.04422 ,
Feb. 2018. URL https://github.com/
algofairness/fairness-comparison .
Galhotra, S., Brun, Y ., and Meliou, A. Fairness Test-
ing: Testing software for discrimination. In Pro-
ceedings of the 2017 11th Joint Meeting on Foun-
dations of Software Engineering , ESEC/FSE 2017,
pp. 498‚Äì510, 2017. doi: http://doi.acm.org/10.1145/3106237.3106277. URL https://github.com/
LASER-UMASS/Themis .
Hardt, M., Price, E., and Srebro, N. Equality of opportunity
in supervised learning. In Advances in Neural Informa-
tion Processing Systems 29 , pp. 3315‚Äì3323, Barcelona,
Spain, December 2016.
Hu, L. and Chen, Y . Welfare and distributional impacts
of fair classiÔ¨Åcation. In Proc. Fairness Accountability
Transparency Machine Learning Workshop , July 2018.
Kamiran, F. and Calders, T. Data preprocessing techniques
for classiÔ¨Åcation without discrimination. Knowledge and
Information Systems , 33(1):1‚Äì33, 2012. doi: https://doi.
org/10.1007/s10115-011-0463-8.
Kamiran, F., Karim, A., and Zhang, X. Decision theory
for discrimination-aware classiÔ¨Åcation. In IEEE Interna-
tional Conference on Data Mining , pp. 924‚Äì929, 2012.
doi: https://doi.org/10.1109/ICDM.2012.45.
Kamishima, T., Akaho, S., Asoh, H., and Sakuma, J.
Fairness-aware classiÔ¨Åer with prejudice remover regu-
larizer. Machine Learning and Knowledge Discovery in
Databases , pp. 35‚Äì50, 2012.
Kleinberg, J., Mullainathan, S., and Raghavan, M. Inherent
trade-offs in the fair determination of risk scores. Inno-
vations in Theoretical Computer Science. ACM , 2017.
Kohavi, R. Scaling up the accuracy of naive-Bayes classi-
Ô¨Åers: a decision-tree hybrid. In Proceedings of the Sec-
ond International Conference on Knowledge Discovery
and Data Mining , 1996. URL https://archive.
ics.uci.edu/ml/datasets/adult .
Kusner, M. J., Loftus, J. R., Russell, C., and Silva, R.
Counterfactual fairness. In NIPS , 2017.
Larson, J. and Angwin, J. Technical re-
sponse to Northpointe, 2016. URL http:
//www.propublica.org/article/
technical-response-to-northpointe .
Larson, J., Mattu, S., Kirchner, L., and Angwin,
J. How we analyzed the COMPAS re-
cidivism algorithm, 2016. URL http:
//www.propublica.org/article/
how-we-analyzed-the-compas-recidivism-algorithm .
Moro, S., Cortez, P., and Rita, P. A data-
driven approach to predict the success of bank tele-
marketing. Decision Support Systems , 62:22‚Äì31,
2014. URL https://archive.ics.uci.edu/
ml/datasets/Bank+Marketing .AI Fairness 360
Narayanan, A. Translation tutorial: 21 fairness deÔ¨Ånitions
and their politics. In Conference on Fairness, Account-
ability, and Transparency , February 2018.
Pierson, E., Simoiu, C., Overgoor, J., Corbett-Davies, S.,
Ramachandran, V ., Phillips, C., and Goel, S. A large-
scale analysis of racial disparities in police stops across
the united states. arXiv preprint arXiv:1706.05678 ,
2017.
Pleiss, G., Raghavan, M., Wu, F., Kleinberg, J., and Wein-
berger, K. Q. On fairness and calibration. In Advances in
Neural Information Processing Systems , pp. 5680‚Äì5689,
2017.
Speicher, T., Heidari, H., Grgic-Hlaca, N., Gummadi, K. P.,
Singla, A., Weller, A., and Zafar, M. B. A uniÔ¨Åed ap-
proach to quantifying algorithmic unfairness: Measuring
individual & group unfairness via inequality indices. In
Proc. ACM SIGKDD Int. Conf. Knowl. Disc. Data Min. ,
pp. 2239‚Äì2248, London, UK, August 2018.
Stevens, A., Anisfeld, A., Kuester, B., London, J., Saleiro,
P., and Ghani, R. Aequitas: Bias and fairness au-
dit, 2018. URL https://github.com/dssg/
aequitas . Center for Data Science and Public Policy,
The University of Chicago.
Tram `er, F., Atlidakis, V ., Geambasu, R., Hsu, D., Hubaux,
J.-P., Humbert, M., Juels, A., and Lin, H. FairTest:
Discovering unwarranted associations in data-driven ap-
plications. In IEEE European Symposium on Security
and Privacy , pp. 401‚Äì416, 2017. doi: https://doi.org/
10.1109/EuroSP.2017.29. URL https://github.
com/columbia/fairtest .
Ustun, B., Spangher, A., and Liu, Y . Actionable recourse
in linear classiÔ¨Åcation. arXiv:1809.06514, September
2018.
Wachter, S., Mittelstadt, B., and Russell, C. Counterfactual
explanations without opening the black box: Automated
decisions and the GDPR. Harvard Journal of Law &
Technology , 31(2):841‚Äì887, Spring 2018.
Zehlike, M., Castillo, C., Bonchi, F., Hajian, S., and Mega-
hed, M. Fairness Measures: Datasets and software
for detecting algorithmic discrimination, 2017. URL
http://fairness-measures.org/ .
Zemel, R., Wu, Y . L., Swersky, K., Pitassi, T., and Dwork,
C. Learning fair representations. In Proceedings of
the International Conference on Machine Learning , pp.
325‚Äì333, Atlanta, USA, June 2013.
Zhang, B. H., Lemoine, B., and Mitchell, M. Mitigat-
ing unwanted biases with adversarial learning. In Proc.
AAAI/ACM Conf. Artif. Intell., Ethics, Society , New Or-
leans, USA, February 2018.AI Fairness 360
Appendices
A UML C LASS DIAGRAM
Dataset+metadata: dict+copy()+export()+split()StructuredDataset+features: np.ndarray+labels: np.ndarray+scores: np.ndarray+protected_attributes: np.ndarray+feature_names: list(str)+label_names: list(str)+protected_attribute_names:list(str)+privileged_protected_attributes:list(np.ndarray)+unprivileged_protected_attributes:list(np.ndarray)+instance_names: list(str)+instance_weights: np.ndarray+ignore_fields: set(str)+align_datasets()+convert_to_dataframe()BinaryLabelDataset+favorable_label: np.float64+unfavorable_label: np.float64
Metric-memoize()DatasetMetric+privileged_groups:list(dict)+unprivileged_groups:list(dict)+difference()+ratio()+num_instances()BinaryLabelDatasetMetric+num_positives()+num_negatives()+base_rate()+disparate_impact()+statistical_parity_difference()+consistency()SampleDistortionMetric+total()+average()+maximum()+euclidean_distance()+manhattan_distance()+mahalanobis_distance()ClassificationMetric+binary_confusion matrix()+generalized_binary_confusion_matrix()+performance_metrics()+average_(abs_)odds_difference+selection_rate()+disparate_impact()+statistical_parity_difference()+generalized_entropy_index()+between_group_generalized_entropy_index()Transformer+fit()+predict()+transform()+fit_predict()+fit_transform()-addmetatdata()StandardDataset
GenericPreProcessing+params...+fit()+transform()GenericInProcessing+params...+fit()+predict()GenericPostProcessing+params...+fit()+predict()ExplainerMetricTextExplainer+(all metric functions)MetricJSONExplainer+(all metric functions)1+metric0..*0..*1+dataset
+dataset0..*12
0..*+dataset+distorted_dataset
0..*+dataset+classified_dataset0..*12+datasetinheritance (is a)aggregation (has a)
Figure 7. Class abstractions for a fair machine learning pipeline, as implemented in AIF360. This Ô¨Ågure is meant to provide a vi-
sual sense of the class hierarchy, many details and some methods are omitted. For brevity, inherited members and methods are not
shown (but overridden ones are) nor are aliases such as recall() fortrue positive rate() . Some methods are ‚Äúmeta-
metrics‚Äù ‚Äî such as difference() ,ratio() ,total() ,average() ,maximum() ‚Äî that act on other metrics to get, e.g.
true positive rate difference() . The metric explainer classes use the same method signatures as the metric classes
(not enumerated) but provide further description for the values. The GenericPreProcessing ,GenericInProcessing , and
GenericPostProcessing are not actual classes but serve as placeholders here for the real bias mitigation algorithms we imple-
mented. Finally, memoize andaddmetadata are Python decorator functions that are automatically applied to every function in their
respective classes.
B C ODE SNIPPETS
This example provides Python code snippets for some common tasks that the user might perform using our toolbox. The
example involves the user loading a dataset, splitting it into training and testing partitions, understanding the outcome
disparity between two demographic groups, and transforming the dataset to mitigate this disparity. A more detailed version
of this example is available in url.redacted .
B.1 Dataset operations
# Load the UCI Adult dataset
from aif360.datasets import AdultDataset
ds_orig = AdultDataset()
# Split into train and test partitions
ds_orig_tr, ds_orig_te = ds_orig.split([0.7], shuffle=True, seed=1)AI Fairness 360
# Look into the training dataset
print("Training Dataset shape")
print(ds_orig_tr.features.shape)
print("Favorable and unfavorable outcome labels")
print(ds_orig_tr.favorable_label, ds_orig_tr.unfavorable_label)
print("Metadata for labels")
print(ds_orig_tr.metadata["label_maps"])
print("Protected attribute names")
print(ds_orig_tr.protected_attribute_names)
print("Privileged and unprivileged protected attribute values")
print(ds_orig_tr.privileged_protected_attributes,
ds_orig_tr.unprivileged_protected_attributes)
print("Metadata for protected attributes")
print(ds_orig_tr.metadata["protected_attribute_maps"])
Expected output: The attributes of the Adult dataset will be printed. The training partition of the Adult dataset has
31655 instances and 98 features with two protected attributes ( race andsex). The labels correspond to high-income
(>50K) or low-income ( <= 50 K), as shown in the metadata. Similar metadata is also available for protected attributes.
B.2 Checking for bias in the original data
# Load the metric class
from aif360.metrics import BinaryLabelDatasetMetric
# Define privileged and unprivileged groups
priv = [{‚Äôsex‚Äô: 1}] # Male
unpriv = [{‚Äôsex‚Äô: 0}] # Female
# Create the metric object
metric_otr = BinaryLabelDatasetMetric( ds_orig_tr,
unprivileged_groups=unpriv, privileged_groups=priv)
# Load and create explainers
from aif360.explainers import MetricTextExplainer, MetricJSONExplainer
text_exp_otr = MetricTextExplainer(metric_otr)
json_exp_otr = MetricJSONExplainer(metric_otr)
# Print statistical parity difference
print(text_exp_otr.statistical_parity_difference())
print(json_exp_otr.statistical_parity_difference())
Expected output: The statistical parity difference should be  0:1974 , which is the difference between probability of
favorable outcome (high income) between the unprivileged group (females) and the privileged group (male) in this dataset.
The JSON output is more elaborate to facilitate consumption by a downstream algorithm.
B.3 Pre-process data to mitigate bias
# Import the reweighing preprocessing algorithm class
from aif360.algorithms.preprocessing.reweighing import Reweighing
# Create the algorithm object
RW = Reweighing(unprivileged_groups=unpriv, privileged_groups=priv)
# Train and predict on the training dataAI Fairness 360
# Uses scikit-learn convention (fit, predict, transform)
RW.fit(ds_orig_tr)
ds_transf_tr = RW.transform(ds_orig_tr)
Expected output: There will be no output here, but the reweighing algorithm equalizes the weights across (group, label)
combination.
B.4 Checking for bias in the pre-processed training data
# Create the metric object for pre-processed data
metric_ttr = BinaryLabelDatasetMetric(ds_transf_tr,
unprivileged_groups=unpriv, privileged_groups=priv)
# Create explainer
text_exp_ttr = MetricTextExplainer(metric_ttr)
# Print statistical parity difference
print(text_exp_ttr.statistical_parity_difference())
Expected output: Because of the action of the re-weighing pre-processing algorithm, the statistical parity difference for
the transformed data ( dstransf tr) must be really close to 0.
B.5 Pre-process out-of-sample testing data and check for bias
# Apply the learned re-weighing pre-processor
ds_transf_te = RW.transform(ds_orig_te)
# Create metric objects for original and
# pre-processed test data
metric_ote = BinaryLabelDatasetMetric(ds_orig_te,
unprivileged_groups=unpriv, privileged_groups=priv)
metric_tte = BinaryLabelDatasetMetric(ds_transf_te,
unprivileged_groups=unpriv, privileged_groups=priv)
# Create explainers for both metric objects
text_exp_ote = MetricTextExplainer(metric_ote)
text_exp_tte = MetricTextExplainer(metric_tte)
# Print statistical parity difference
print(text_exp_ote.statistical_parity_difference())
print(text_exp_tte.statistical_parity_difference())
Expected output: The trained re-weighing pre-processor can be applied on the out-of-sample test data. The metrics for
the original and transformed testing data will show a signiÔ¨Åcant reduction in statistical parity difference (-0.2021 to -0.0119
in this case).AI Fairness 360
C A DDITIONAL EXPERIMENTAL DETAILS
We provide additional details on the experimental evaluations.
C.1 Datasets
C.1.1 Adult Census Income
For protected attribute sex,Male is privileged, and Female is unprivileged. For protected attribute race,White is privileged,
andNon-white is unprivileged. Favorable label is High income (>50K) and unfavorable label is Low income (<= 50 K).
C.1.2 German Credit
For protected attribute sex,Male is privileged, and Female is unprivileged. For protected attribute age,Oldis privileged,
andYoung is unprivileged. Favorable label is Good credit and unfavorable label is Bad credit .
C.1.3 Probpublica recidivism (COMPAS)
For protected attribute sex,Female is privileged, and Male is unprivileged. For protected attribute race,Caucasian is
privileged, and Not Caucasian is unprivileged. Favorable label is Did not recidivate and unfavorable label is Did recidivate .
C.2 Metrics
C.2.1 Statistical Parity Difference
This is the difference in the probability of favorable outcomes between the unprivileged and privileged groups. This can
be computed both from the input dataset as well as from the dataset output from a classiÔ¨Åer (predicted dataset). A value
of0implies both groups have equal beneÔ¨Åt, a value less than 0implies higher beneÔ¨Åt for the privileged group, and a value
greater than 0implies higher beneÔ¨Åt for the unprivileged group.
C.2.2 Disparate Impact
This is the ratio in the probability of favorable outcomes between the unprivileged and privileged groups. This can be
computed both from the input dataset as well as from the dataset output from a classiÔ¨Åer (predicted dataset). A value of
1implies both groups have equal beneÔ¨Åt, a value less than 1implies higher beneÔ¨Åt for the privileged group, and a value
greater than 1implies higher beneÔ¨Åt for the unprivileged group.
C.2.3 Average odds difference
This is the average of difference in false positive rates and true positive rates between unprivileged and privileged groups.
This is a method in the ClassificationMetric class and hence needs to be computed using the input and output
datasets to a classiÔ¨Åer. A value of 0implies both groups have equal beneÔ¨Åt, a value less than 0implies higher beneÔ¨Åt for
the privileged group and a value greater than 0implies higher beneÔ¨Åt for the unprivileged group.
C.2.4 Equal opportunity difference
This is the difference in true positive rates between unprivileged and privileged groups. This is a method in the
ClassificationMetric class and hence needs to be computed using the input and output datasets to a classiÔ¨Åer.
A value of 0implies both groups have equal beneÔ¨Åt, a value less than 0implies higher beneÔ¨Åt for the privileged group and
a value greater than 0implies higher beneÔ¨Åt for the unprivileged group.
D E VALUATION ON DIFFERENT DATA SETS
We present additional results with bias mitigation obtained for various datasets and protected attributes. These correspond
to the setting described in Section 10.AI Fairness 360
(a) Statistical parity difference
 (b) Disparate impact
 (c) Average odds difference
 (d) Equal opportunity difference
Figure 8. Fairness vs. Balanced Accuracy before (top panel) and after (bottom panel) applying various bias mitigation algorithms. Four
different fairness metrics are shown. In most cases two classiÔ¨Åers (Logistic regression - LR or Random forest classiÔ¨Åer - RF) were used.
The ideal fair value of disparate impact is 1, whereas for all other metrics it is 0. The circles indicate the mean value and bars indicate
the extent of 1 standard deviation. Data set: Adult , Protected attribute: sex.
(a) Statistical parity difference
 (b) Disparate impact
 (c) Average odds difference
 (d) Equal opportunity difference
Figure 9. Fairness vs. Balanced Accuracy before (top panel) and after (bottom panel) applying various bias mitigation algorithms. Four
different fairness metrics are shown. In most cases two classiÔ¨Åers (Logistic regression - LR or Random forest classiÔ¨Åer - RF) were used.
The ideal fair value of disparate impact is 1, whereas for all other metrics it is 0. The circles indicate the mean value and bars indicate
the extent of 1 standard deviation. Data set: german , Protected attribute: sex.AI Fairness 360
(a) Statistical parity difference
 (b) Disparate impact
 (c) Average odds difference
 (d) Equal opportunity difference
Figure 10. Fairness vs. Balanced Accuracy before (top panel) and after (bottom panel) applying various bias mitigation algorithms. Four
different fairness metrics are shown. In most cases two classiÔ¨Åers (Logistic regression - LR or Random forest classiÔ¨Åer - RF) were used.
The ideal fair value of disparate impact is 1, whereas for all other metrics it is 0. The circles indicate the mean value and bars indicate
the extent of 1 standard deviation. Data set: german , Protected attribute: age.
(a) Statistical parity difference
 (b) Disparate impact
 (c) Average odds difference
 (d) Equal opportunity difference
Figure 11. Fairness vs. Balanced Accuracy before (top panel) and after (bottom panel) applying various bias mitigation algorithms. Four
different fairness metrics are shown. In most cases two classiÔ¨Åers (Logistic regression - LR or Random forest classiÔ¨Åer - RF) were used.
The ideal fair value of disparate impact is 1, whereas for all other metrics it is 0. The circles indicate the mean value and bars indicate
the extent of 1 standard deviation. Data set: compas , Protected attribute: sex.AI Fairness 360
(a) Statistical parity difference
 (b) Disparate impact
 (c) Average odds difference
 (d) Equal opportunity difference
Figure 12. Fairness vs. Balanced Accuracy before (top panel) and after (bottom panel) applying various bias mitigation algorithms. Four
different fairness metrics are shown. In most cases two classiÔ¨Åers (Logistic regression - LR or Random forest classiÔ¨Åer - RF) were used.
The ideal fair value of disparate impact is 1, whereas for all other metrics it is 0. The circles indicate the mean value and bars indicate
the extent of 1 standard deviation. Data set: compas , Protected attribute: race.AI Fairness 360
E UI PAGE
Figure 13. A screen shot from the web interactive experience, showing the results of mitigation applied to one of the available datasets.